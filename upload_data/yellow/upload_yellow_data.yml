id: upload_yellow_data
namespace: trantam

variables:
  taxi: "yellow"
  year_month: "{{trigger.date | date('yyyy-MM')}}"
  source_file: "{{vars.taxi}}_tripdata_{{vars.year_month}}.parquet"
  source_file_limited: "{{vars.taxi}}_tripdata_{{vars.year_month}}_limited.parquet"
  csv_file: "{{vars.taxi}}_tripdata_{{vars.year_month}}.csv"
  limit_num_row: "10000"
  staging_table: 'raw_data.\"staging_table_{{vars.year_month}}\"'
  staging_table_for_copy_data: 'raw_data."staging_table_{{vars.year_month}}"'
  main_table: "raw_data.{{vars.taxi}}_tripdata"
  create_main_table_param: '{ "table": "{{vars.main_table}}" }'
  create_staging_table_param: '{ "table": "{{vars.staging_table}}" }'
  complete_staging_table_param: '{ "table": "{{vars.staging_table}}", "source_file": "{{vars.source_file}}" }'
  merge_param: '{ "main_table": "{{vars.main_table}}", "staging_table": "{{vars.staging_table}}"  }'
  remove_staging_table_param: ' {"table": "{{vars.staging_table}}"} '

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.source_file)}}"
      taxi: "{{render(vars.taxi) }}"

  - id: wdir
    type: io.kestra.plugin.core.flow.WorkingDirectory
    tasks:
      - id: clone
        type: io.kestra.plugin.git.Clone
        url: https://github.com/zalexdevon/dbt_cli_project.git

      - id: extract
        type: io.kestra.plugin.scripts.shell.Commands
        taskRunner:
          type: io.kestra.plugin.core.runner.Process
        commands:
          - wget -q -O {{render(vars.source_file)}} https://d37ci6vzurychx.cloudfront.net/trip-data/{{render(vars.source_file)}}

      - id: limit_data
        type: io.kestra.plugin.scripts.python.Commands
        description: Take only {{render(vars.limit_num_row)}} first rows of data
        beforeCommands:
          - pip install pandas pyarrow
        commands:
          - python upload_data/utils/limit_data.py {{ render(vars.source_file)}} {{ render(vars.source_file_limited) }} {{render(vars.limit_num_row)}}

      - id: convert_parquet_to_csv
        type: io.kestra.plugin.scripts.python.Commands
        beforeCommands:
          - pip install pandas pyarrow
        outputFiles:
          - "*.csv"
        commands:
          - python upload_data/utils/convert_parquet_to_csv.py {{ render(vars.source_file_limited)}} {{ render(vars.csv_file) }}

      - id: read_sql
        type: io.kestra.plugin.scripts.python.Commands
        beforeCommands:
          - pip install kestra jinja2
        commands:
          - python upload_data/utils/read_sql.py '{{render(vars.create_main_table_param)}}'  "upload_data/{{render(vars.taxi)}}/sql/create_main_table.sql"
          - python upload_data/utils/read_sql.py '{{render(vars.create_staging_table_param)}}'  "upload_data/{{render(vars.taxi)}}/sql/create_staging_table.sql"
          - python upload_data/utils/read_sql.py '{{render(vars.complete_staging_table_param)}}'  "upload_data/{{render(vars.taxi)}}/sql/complete_staging_table.sql"
          - python upload_data/utils/read_sql.py '{{render(vars.merge_param)}}'  "upload_data/{{render(vars.taxi)}}/sql/merge.sql"
          - python upload_data/utils/read_sql.py '{{render(vars.remove_staging_table_param)}}'  "upload_data/utils/remove_staging_table.sql"

      - id: create_main_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: "{{ outputs.read_sql.vars.create_main_table }}"

      - id: create_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: "{{ outputs.read_sql.vars.create_staging_table }}"

      - id: copy_data_to_staging_table
        type: io.kestra.plugin.jdbc.postgresql.CopyIn
        format: CSV
        from: "{{outputs.convert_parquet_to_csv.outputFiles[render(vars.csv_file)]}}"
        table: "{{render(vars.staging_table_for_copy_data)}}"
        header: true
        columns:
          [
            VendorID,
            tpep_pickup_datetime,
            tpep_dropoff_datetime,
            passenger_count,
            trip_distance,
            RatecodeID,
            store_and_fwd_flag,
            PULocationID,
            DOLocationID,
            payment_type,
            fare_amount,
            extra,
            mta_tax,
            tip_amount,
            tolls_amount,
            improvement_surcharge,
            total_amount,
            congestion_surcharge,
            airport_fee,
          ]

      - id: complete_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: "{{ outputs.read_sql.vars.complete_staging_table }}"

      - id: merge
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: "{{ outputs.read_sql.vars.merge }}"

      - id: remove_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: "{{ outputs.read_sql.vars.remove_staging_table }}"

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: This will remove output files. If you'd like to explore Kestra outputs, disable it.

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://host.docker.internal:5432/ny_taxi
      username: root
      password: root

triggers:
  - id: schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"
